
<style>
body {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  width: 960px;
  height: 500px;
  position: relative;
}
svg {
    width: 100%;
    height: 100%;
}
/*.badstuff {
  display: none;
}*/
path.slice{
    stroke-width:2px;
}
polyline{
    opacity: .3;
    stroke: black;
    stroke-width: 2px;
    fill: none;
}
.chart-key {
  display: none;
}
.print .chart-key {
  display: block;
}
.chart-key ul {
  list-style: none;
  margin-bottom: 0;
}
.chart-key li {
  position: relative;
  display: inline-block;
  margin-right: 20px;
}
.chart-key-title {
  font-weight: bold;
  font-size: 1.2em;
}
.TBD:before,
.applied:before,
.interviewed:before,
.offer:before,
.archive:before {
  content: '';
  display: inline-block;
  height: 8px;
  width: 16px;
  line-height: inherit;
}
.TBD:before {
  background-color: #aafac8;
}
.applied:before {
  background-color: #c7ffed;
}
.interviewed:before {
  background-color: #bbc8ca;
}
.offer:before {
  background-color: #b592a0;
}
.archive:before {
  background-color: #9c7178;
}
</style>
<body>
  <nav>
     <div class="row" id="nav-container">
              <ul class="col-lg-12" id ="menu-items">
                  <div class = "title">

                    <li><a class="nav-items" href="/">LEG WORK</a></li>
                  </div>
                  <div class = "menu-items">
                    <li><a class="nav-link" href="/members">Profile</a></li>
                    <li><a class="nav-link" href="/company">Companies</a></li>
                    <li><a class="nav-link" href="/piechart">Analytics</a></li>
                    <li><a class="nav-link" href="/logout">Logout</a></li>
                  </div>
              </ul>
      </div>
    </nav>
  <div class="container print">
  <div class="row">
    <div class="col-sm-12">
      <div class="chart-key text-right">
        <div class="well well-sm">
          <ul>
            <li class="chart-key-title">Key</li>
            <li class="TBD">
              TBD
            </li>
            <li class="applied">
              Interviewed
            </li>
            <li class="interviewed">
              Applied
            </li>
            <li class="offer">
              Offer
            </li>
            <li class="archive">
            Archive
            </li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>
<button class="update">Update</button>
{{#each Application}}
<h2>{{this.stage}}</h2>
{{/each}}
<script src="https://d3js.org/d3.v3.min.js"></script>
<script>
var svg = d3.select("body")
    .append("svg")
    .append("g")
svg.append("g")
    .attr("class", "slices");
svg.append("g")
    .attr("class", "labels");
svg.append("g")
    .attr("class", "lines");
var width = 960,
    height = 450,
    radius = Math.min(width, height) / 2;
var pie = d3.layout.pie()
    .sort(null)
    .value(function(d) {
        return d.value;
    });
var arc = d3.svg.arc()
    .outerRadius(radius * 0.8)
    .innerRadius(radius * 0.2);
var outerArc = d3.svg.arc()
    .innerRadius(radius * 0.9)
    .outerRadius(radius * 0.9);
svg.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
var key = function(d){ return d.data.label; };
/* ------- THE TROUBLE BEGINS -------*/
//this sets the color, and domain. the domain is later paired with a number
//value, in the function on line 114 dbData()
var color = d3.scale.ordinal()
    .domain(["TBD", "Applied", "Interviewed", "Offer", "Archive"])
    .range(["#aafac8", "#c7ffed", "#bbc8ca", "#b592a0", "#9c7178","422557" ]);
//ajax call to get stages(column) data from database
var numbers = ["1","2","3","4","5"];
$.get("/api/piechart", function(data) {
//console.log(data[1].stage, "HERE IT IS");
//for each application, determine the stage and add 1 to the value at that index
//in the numbers array
let nums = (data, cb) => {
    for(var i=0; i< data.length; i++)
  {switch (data[i].stage) {
      case "TBD":
    numbers.splice(0,1,(parseInt(numbers[0])+ 1).toString());
          break;
      case "Applied":
        numbers.splice(1,1,(parseInt(numbers[1])+ 1).toString());
          break;
      case "Interviewed":
      numbers.splice(2,1,(parseInt(numbers[2])+ 1).toString());
          break;
      case "Offer":
        numbers.splice(3,1,(parseInt(numbers[3])+ 1).toString());
          break;
      case "Archive":
          numbers.splice(4,1,(parseInt(numbers[4])+ 1).toString());
          break;
        }
      }
      cb(numbers)
}
nums(data,(numbers)=>{
    //build stuff
    console.log(numbers)
});
});
//numbers is also needed here
function dbData (){
//gets the domain labels and maps number values to them
    var labels = color.domain();
    return labels.map(function(label){
    //the labels plus the number of applicaitons at that stage, the value is set to the number at the corresponding index of the labels & numbers arrays
        return { label: label+": " + numbers[labels.indexOf(label)], value: numbers[labels.indexOf(label)]}
    });
}
change(dbData());
//
d3.select(".update")
    .on("click", function(){
        change(dbData());
    });
function change(data) {
    /* ------- PIE SLICES -------*/
    var slice = svg.select(".slices").selectAll("path.slice")
        .data(pie(data), key);
    slice.enter()
        .insert("path")
        .style("fill", function(d) { return color(d.data.label); })
        .attr("class", "slice");
    slice
        .transition().duration(1000)
        .attrTween("d", function(d) {
            this._current = this._current || d;
            var interpolate = d3.interpolate(this._current, d);
            this._current = interpolate(0);
            return function(t) {
                return arc(interpolate(t));
            };
        })
    slice.exit()
        .remove();
    /* ------- TEXT LABELS -------*/
    var text = svg.select(".labels").selectAll("text")
        .data(pie(data), key);
    // text.enter()
  //
    //  .append("text")
    //  .attr("dy", ".35em")
    //  .text(function(d) {
  //
  //     //text.remove();
    //      return d.data.label;
    //  });
    function midAngle(d){
        return d.startAngle + (d.endAngle - d.startAngle)/2;
    }
    text.transition().duration(1000)
        .attrTween("transform", function(d) {
            this._current = this._current || d;
            var interpolate = d3.interpolate(this._current, d);
            this._current = interpolate(0);
            return function(t) {
        //text.remove();
                var d2 = interpolate(t);
                var pos = outerArc.centroid(d2);
        console.log(text)
        if(text.length > 5){
          text.attr("class", "goaway");
        } else {
        //console.log(text.transform === undefined)
        //if (text[i]) === 'null') {
        //  text.attr('class', 'badstuff')
      //  } else {
                pos[0] = radius * (midAngle(d2) < Math.PI ? 1 : -1);
                return "translate("+ pos +")";
      }
            };
        })
        .styleTween("text-anchor", function(d){
            this._current = this._current || d;
            var interpolate = d3.interpolate(this._current, d);
            this._current = interpolate(0);
            return function(t) {
                var d2 = interpolate(t);
                return midAngle(d2) < Math.PI ? "start":"end";
            };
        });
    text.exit()
        .remove();
    /* ------- SLICE TO TEXT POLYLINES -------*/
    var polyline = svg.select(".lines").selectAll("polyline")
        .data(pie(data), key);
    // polyline.enter()
    //  .append("polyline");
    polyline.transition().duration(1000)
        .attrTween("points", function(d){
            this._current = this._current || d;
            var interpolate = d3.interpolate(this._current, d);
            this._current = interpolate(0);
            return function(t) {
                var d2 = interpolate(t);
                var pos = outerArc.centroid(d2);
                pos[0] = radius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);
                return [arc.centroid(d2), outerArc.centroid(d2), pos];
            };
        });
    polyline.exit()
        .remove();
};
</script>
